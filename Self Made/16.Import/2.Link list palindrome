/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution 
{
public:
    bool isPalindrome(ListNode* head) 
    {ListNode *p=head,*q=head;int flag=0;
        stack<int>s;
        while(p!=NULL)
        {
            s.push(p->val);
            p=p->next;
        }
     while(s.empty()==false)
     {
         if(s.top()!=q->val)
         {
             flag=1;
              break;
         }
         else
             s.pop();
            q=q->next;
     }
     if(flag==1)
         return false;
     else
         return true;
    }
};

//avobe is O(n) space and O(N) time



//m-2
ListNode *temp = NULL; 
 
bool check(ListNode *head){ 
	if(!head) //if head==NULL
		return true; 
 
	bool isPal = check(head -> next) && (temp -> data == head -> data); 
	temp = temp -> next; 
	return isPal;  
} 
 
bool isPalindrome(ListNode *head){ 
	temp = head; 
	return check(head); 
} 

//O(1) extra space and O(n) time